Description: (c) 2022 Quilt Data, Inc. - Private Quilt catalog and services
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Administrator web credentials
        Parameters:
          - AdminUsername
          - AdminEmail
          - AdminPassword
      - Label:
          default: Web, backend, and role settings
        Parameters:
          - CertificateArnELB
          - QuiltWebHost
          - DBUser
          - DBPassword
      - Label:
          default: Auth Settings
        Parameters:
          - PasswordAuth
          - GoogleAuth
          - GoogleClientId
          - SingleSignOnDomains
          - OktaAuth
          - OktaClientId
          - OktaBaseUrl
          - OneLoginAuth
          - OneLoginClientId
          - OneLoginBaseUrl
          - AzureAuth
          - AzureClientId
          - AzureBaseUrl
Conditions:
  SingleSignOn: !Not
    - !Equals
      - !Ref 'PasswordAuth'
      - Enabled
  SsoAuth: !Or
    - !Equals
      - !Ref 'GoogleAuth'
      - Enabled
    - !Equals
      - !Ref 'OktaAuth'
      - Enabled
    - !Equals
      - !Ref 'OneLoginAuth'
      - Enabled
    - !Equals
      - !Ref 'AzureAuth'
      - Enabled
  GoogleAuth: !Equals
    - !Ref 'GoogleAuth'
    - Enabled
  OktaAuth: !Equals
    - !Ref 'OktaAuth'
    - Enabled
  OneLoginAuth: !Equals
    - !Ref 'OneLoginAuth'
    - Enabled
  AzureAuth: !Equals
    - !Ref 'AzureAuth'
    - Enabled
Outputs:
  LoadBalancerDNSName:
    Description: Load balancer for Quilt server
    Value: !GetAtt 'LoadBalancer.DNSName'
  RegistryRoleARN:
    Description: ARN of execution role used for identity service. Use this to set up a trust relationship.
    Value: !GetAtt 'AmazonECSTaskExecutionRole.Arn'
  RegistryHost:
    Description: Hostname of the Quilt server. Create a CNAME record for <RegistryHostName> with value <LoadBalancerDNSName>.
    Value: !Join
      - .
      - - !Join
          - '-'
          - - !Select
              - 0
              - !Split
                - .
                - !Ref 'QuiltWebHost'
            - registry
        - !Select
          - 1
          - !Split
            - .
            - !Ref 'QuiltWebHost'
        - !Select
          - 2
          - !Split
            - .
            - !Ref 'QuiltWebHost'
  S3ProxyHost:
    Description: Hostname of the S3 proxy. Create a CNAME record for <S3ProxyHostName> with value <LoadBalancerDNSName>.
    Value: !Join
      - .
      - - !Join
          - '-'
          - - !Select
              - 0
              - !Split
                - .
                - !Ref 'QuiltWebHost'
            - s3-proxy
        - !Select
          - 1
          - !Split
            - .
            - !Ref 'QuiltWebHost'
        - !Select
          - 2
          - !Split
            - .
            - !Ref 'QuiltWebHost'
  QuiltWebHost:
    Description: Hostname for your Quilt catalog. Create a CNAME record for <QuiltWebHost> with value <LoadBalancerDNSName>.
    Value: !Ref 'QuiltWebHost'
  TemplateBuildMetadata:
    Description: Metadata generated by the Quilt build system.
    Value: '{"git_revision": "fa05eff", "git_repository": "/Users/kmoore/toa/github/quilt-deployment", "make_time": "2022-02-01 17:34:02.271080", "variant": "default"}'
Parameters:
  AdminUsername:
    Type: String
    Default: admin
    AllowedPattern: ^[a-z][a-z0-9_]+$
    Description: Username for Quilt administrator (the account will be created for you)
  AdminEmail:
    Type: String
    MinLength: 5
    AllowedPattern: '[^\s@]+@[^\s@]+\.[^\s@]+'
    Description: Email for Quilt administrator. Required for password recovery.
  AdminPassword:
    Type: String
    MinLength: 8
    NoEcho: true
    Description: Password for Quilt administrator
  DBUser:
    Type: String
    NoEcho: false
    Default: root
    MinLength: 2
    Description: The Quilt server's database default username. The database is not accessible outside your VPC.
  DBPassword:
    Type: String
    AllowedPattern: ^[a-zA-z0-9]{8,}$
    NoEcho: true
    MinLength: 8
    Description: Alphanumeric database password for the Quilt server. (The database is not accessible outside your VPC.)
  CertificateArnELB:
    Type: String
    AllowedPattern: ^arn:aws:acm:.*$
    Description: SSL certificate in the stack's region for the Quilt load balancer ('arn:aws:acm:...' format). See Amazon Certificate Manager for details.
  QuiltWebHost:
    Type: String
    MinLength: 1
    AllowedPattern: ^[-\w]+\.[-\w]+\.[-\w]+$
    Description: >-
      Domain name where your users access Quilt on the web. Must be of the form 'sub.domain.tld'. Must match CertificateArn. Must *not* be mapped in your DNS until after the stack is created. Must be unique
      as an origin across all of your CloudFront distributions.
  PasswordAuth:
    Type: String
    AllowedValues:
      - Enabled
      - Disabled
    Description: Allow Quilt to authenticate users via email and password (for external collaborators without SSO)
    Default: Enabled
  GoogleAuth:
    Type: String
    AllowedValues:
      - Enabled
      - Disabled
    Description: Google authentication
    Default: Disabled
  GoogleClientId:
    Type: String
    Description: 'Client ID for Google Auth OAuth2 Client; Create an OAuth2 Client for your domain by following the instructions here: see https://developers.google.com/identity/protocols/OAuth2UserAgent'
  OktaClientId:
    Type: String
    Description: Client ID for Okta Auth
  OktaBaseUrl:
    Type: String
    Description: Base URL for Okta
  SingleSignOnDomains:
    Type: String
    Description: Comma-separated list of G Suite domains that can log into Quilt (e.g. 'mycompany1.com, mycompany2.com')
  OktaAuth:
    Type: String
    AllowedValues:
      - Enabled
      - Disabled
    Description: Okta authentication
    Default: Disabled
  OneLoginAuth:
    Type: String
    AllowedValues:
      - Enabled
      - Disabled
    Description: OneLogin authentication
    Default: Disabled
  OneLoginClientId:
    Type: String
    Description: Client ID for OneLogin Auth
  OneLoginBaseUrl:
    Type: String
    Description: Base URL for OneLogin
  AzureAuth:
    Type: String
    AllowedValues:
      - Enabled
      - Disabled
    Description: Azure authentication
    Default: Disabled
  AzureClientId:
    Type: String
    Description: Client ID for Azure Auth
  AzureBaseUrl:
    Type: String
    Description: Base URL for Azure (e.g. https://login.microsoftonline.com/01234567-89ab-cdef-0123-456789abcdef)
Resources:
  LogGroup:
    Properties:
      LogGroupName: !Ref 'AWS::StackName'
      RetentionInDays: 90
    Type: AWS::Logs::LogGroup
  VPC:
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
    Type: AWS::EC2::VPC
  InternetGateway:
    Properties:
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
    Type: AWS::EC2::InternetGateway
  AttachGateway:
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
    Type: AWS::EC2::VPCGatewayAttachment
  RouteTable:
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
    Type: AWS::EC2::RouteTable
  Route:
    Properties:
      RouteTableId: !Ref 'RouteTable'
      GatewayId: !Ref 'InternetGateway'
      DestinationCidrBlock: '0.0.0.0/0'
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
  SubnetA:
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Sub '${AWS::Region}a'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-a'
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
  SubnetARouteAssoc:
    Properties:
      SubnetId: !Ref 'SubnetA'
      RouteTableId: !Ref 'RouteTable'
    Type: AWS::EC2::SubnetRouteTableAssociation
  SubnetB:
    Properties:
      VpcId: !Ref 'VPC'
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Sub '${AWS::Region}b'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-b'
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
  SubnetBRouteAssoc:
    Properties:
      SubnetId: !Ref 'SubnetB'
      RouteTableId: !Ref 'RouteTable'
    Type: AWS::EC2::SubnetRouteTableAssociation
  ElbSecurityGroup:
    Properties:
      GroupName: !Sub 'elb-${AWS::StackName}'
      GroupDescription: HTTPS
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
        - CidrIp: '0.0.0.0/0'
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
        - CidrIp: '0.0.0.0/0'
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-elb'
    Type: AWS::EC2::SecurityGroup
  LoadBalancer:
    Properties:
      Scheme: internet-facing
      Subnets:
        - !Ref 'SubnetA'
        - !Ref 'SubnetB'
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '180'
      SecurityGroups:
        - !GetAtt 'VPC.DefaultSecurityGroup'
        - !Ref 'ElbSecurityGroup'
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  Listener:
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: '404'
            ContentType: text/plain
            MessageBody: Nothing to see here.
      LoadBalancerArn: !Ref 'LoadBalancer'
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref 'CertificateArnELB'
    Type: AWS::ElasticLoadBalancingV2::Listener
  InsecureListener:
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: '443'
            StatusCode: HTTP_301
      LoadBalancerArn: !Ref 'LoadBalancer'
      Port: 80
      Protocol: HTTP
    Type: AWS::ElasticLoadBalancingV2::Listener
  Cluster:
    Properties:
      ClusterName: !Ref 'AWS::StackName'
    Type: AWS::ECS::Cluster
  BucketReadPolicy:
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:ListBucket
              - s3:ListBucketVersions
              - s3:GetBucketVersioning
            Resource:
              - arn:aws:s3:::quilt-empty
              - arn:aws:s3:::quilt-empty/*
    Type: AWS::IAM::ManagedPolicy
  BucketWritePolicy:
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:ListBucket
              - s3:ListBucketVersions
              - s3:GetBucketVersioning
            Resource:
              - arn:aws:s3:::quilt-empty
              - arn:aws:s3:::quilt-empty/*
    Type: AWS::IAM::ManagedPolicy
  SubnetGroup:
    Properties:
      DBSubnetGroupDescription: Subnet group for the DB
      SubnetIds:
        - !Ref 'SubnetA'
        - !Ref 'SubnetB'
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
    Type: AWS::RDS::DBSubnetGroup
  DB:
    Properties:
      Engine: postgres
      EngineVersion: '11.12'
      AllowMajorVersionUpgrade: true
      AutoMinorVersionUpgrade: false
      EnableCloudwatchLogsExports:
        - upgrade
      DBInstanceClass: db.t3.small
      DBName: quilt
      MasterUsername: !Ref 'DBUser'
      MasterUserPassword: !Ref 'DBPassword'
      StorageType: gp2
      AllocatedStorage: '100'
      PubliclyAccessible: false
      DBSubnetGroupName: !Ref 'SubnetGroup'
      MultiAZ: true
      StorageEncrypted: true
      VPCSecurityGroups:
        - !GetAtt 'VPC.DefaultSecurityGroup'
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
    Type: AWS::RDS::DBInstance
  DeadLetterQueue:
    Type: AWS::SQS::Queue
  IndexerQueue:
    Properties:
      DelaySeconds: 0
      VisibilityTimeout: 5401
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt 'DeadLetterQueue.Arn'
        maxReceiveCount: 15
    Type: AWS::SQS::Queue
  Search:
    Properties:
      ElasticsearchVersion: '6.7'
      ElasticsearchClusterConfig:
        InstanceCount: 2
        InstanceType: m5.xlarge.elasticsearch
        DedicatedMasterEnabled: true
        DedicatedMasterCount: 3
        DedicatedMasterType: t3.medium.elasticsearch
        ZoneAwarenessEnabled: true
      EBSOptions:
        EBSEnabled: true
        VolumeSize: 100
        VolumeType: gp2
      AdvancedOptions:
        indices.fielddata.cache.size: '40'
      LogPublishingOptions:
        ES_APPLICATION_LOGS:
          Enabled: false
        SEARCH_SLOW_LOGS:
          Enabled: false
        INDEX_SLOW_LOGS:
          Enabled: false
    Type: AWS::Elasticsearch::Domain
    DependsOn: []
  SearchHandlerRole:
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref 'BucketReadPolicy'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - es:ESHttpDelete
                  - es:ESHttpGet
                  - es:ESHttpHead
                  - es:ESHttpPost
                  - es:ESHttpPut
                Resource: !Sub '${Search.Arn}/*'
              - Effect: Allow
                Action:
                  - sqs:DeleteMessage
                  - sqs:ReceiveMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt 'IndexerQueue.Arn'
    Type: AWS::IAM::Role
  IndexingPerBucketConfigs:
    Properties:
      Name: !Sub '/quilt/${AWS::StackName}/Indexing/PerBucketConfigs'
      Type: String
      Value: '{}'
    Type: AWS::SSM::Parameter
  SearchHandler:
    Properties:
      Handler: index.handler
      Role: !GetAtt 'SearchHandlerRole.Arn'
      Runtime: python3.7
      Timeout: 900
      MemorySize: 512
      ReservedConcurrentExecutions: 80
      Environment:
        Variables:
          CONTENT_INDEX_EXTS: .csv, .ipynb, .json, .md, .parquet, .rmd, .tsv, .txt
          ES_HOST: !GetAtt 'Search.DomainEndpoint'
          SKIP_ROWS_EXTS: ''
          DOC_LIMIT_BYTES: 256000
          PER_BUCKET_CONFIGS: !GetAtt 'IndexingPerBucketConfigs.Value'
      Code:
        S3Bucket: !Sub 'quilt-lambda-${AWS::Region}'
        S3Key: indexer/73389f1f.zip
    Type: AWS::Lambda::Function
  LambdaFunctionEventSourceMapping:
    Properties:
      BatchSize: 100
      MaximumBatchingWindowInSeconds: 1
      Enabled: true
      EventSourceArn: !GetAtt 'IndexerQueue.Arn'
      FunctionName: !GetAtt 'SearchHandler.Arn'
    Type: AWS::Lambda::EventSourceMapping
  CloudTrailBucket:
    Type: AWS::S3::Bucket
  CloudTrailBucketPolicy:
    Properties:
      Bucket: !Ref 'CloudTrailBucket'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:GetBucketAcl
            Resource: !Sub 'arn:aws:s3:::${CloudTrailBucket}'
          - Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub 'arn:aws:s3:::${CloudTrailBucket}/AWSLogs/${AWS::AccountId}/*'
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control
    Type: AWS::S3::BucketPolicy
  Trail:
    Properties:
      TrailName: !Sub '${AWS::StackName}-trail'
      IsMultiRegionTrail: true
      IsLogging: true
      IncludeGlobalServiceEvents: true
      S3BucketName: !Ref 'CloudTrailBucket'
      EventSelectors:
        - DataResources:
            - Type: AWS::S3::Object
              Values: []
          IncludeManagementEvents: false
    Type: AWS::CloudTrail::Trail
    DependsOn: CloudTrailBucketPolicy
  AnalyticsBucket:
    Properties:
      CorsConfiguration:
        CorsRules:
          - AllowedMethods:
              - GET
              - HEAD
              - POST
            AllowedOrigins:
              - '*'
            AllowedHeaders:
              - '*'
    Type: AWS::S3::Bucket
  AthenaDatabase:
    Properties:
      CatalogId: !Ref 'AWS::AccountId'
      DatabaseInput:
        Name: !Join
          - _
          - !Split
            - '-'
            - !Ref 'AnalyticsBucket'
    Type: AWS::Glue::Database
  NamedPackagesAthenaTable:
    Properties:
      CatalogId: !Ref 'AWS::AccountId'
      DatabaseName: !Ref 'AthenaDatabase'
      TableInput:
        Name: named_packages
        TableType: EXTERNAL_TABLE
        PartitionKeys:
          - Name: bucket
            Type: string
        StorageDescriptor:
          Columns:
            - Name: hash
              Type: string
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          Location: !Sub 's3://${AnalyticsBucket}/named_packages/'
          OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
          SerdeInfo:
            SerializationLibrary: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
    Type: AWS::Glue::Table
  AccessCountsRole:
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref 'BucketReadPolicy'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - athena:GetNamedQuery
                  - athena:StartQueryExecution
                  - athena:GetQueryExecution
                  - athena:GetQueryResults
                  - glue:CreateTable
                  - glue:BatchCreatePartition
                  - glue:DeleteTable
                  - glue:GetDatabase
                  - glue:GetPartition
                  - glue:GetPartitions
                  - glue:GetTable
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:GetBucketLocation
                  - s3:ListBucket
                Resource:
                  - !Sub 'arn:aws:s3:::${AnalyticsBucket}'
                  - !Sub 'arn:aws:s3:::${CloudTrailBucket}'
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub 'arn:aws:s3:::${CloudTrailBucket}/*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:DeleteObject
                  - s3:PutObject
                Resource: !Sub 'arn:aws:s3:::${AnalyticsBucket}/*'
    Type: AWS::IAM::Role
  AccessCountsLambda:
    Properties:
      Code:
        S3Bucket: !Sub 'quilt-lambda-${AWS::Region}'
        S3Key: access_counts/73389f1f.zip
      Handler: index.handler
      Role: !GetAtt 'AccessCountsRole.Arn'
      Runtime: python3.7
      Timeout: 900
      MemorySize: 192
      ReservedConcurrentExecutions: 1
      Environment:
        Variables:
          ATHENA_DATABASE: !Ref 'AthenaDatabase'
          CLOUDTRAIL_BUCKET: !Ref 'CloudTrailBucket'
          QUERY_RESULT_BUCKET: !Ref 'AnalyticsBucket'
          ACCESS_COUNTS_OUTPUT_DIR: AccessCounts
    Type: AWS::Lambda::Function
  AccessCountsCron:
    Properties:
      ScheduleExpression: rate(1 hour)
      Targets:
        - Arn: !GetAtt 'AccessCountsLambda.Arn'
          Id: AccessCounts
    Type: AWS::Events::Rule
  AccessCountPermission:
    Properties:
      FunctionName: !GetAtt 'AccessCountsLambda.Arn'
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt 'AccessCountsCron.Arn'
    Type: AWS::Lambda::Permission
  PkgEventsRole:
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole
        - arn:aws:iam::aws:policy/AmazonEventBridgeFullAccess
        - !Ref 'BucketReadPolicy'
    Type: AWS::IAM::Role
  PkgEvents:
    Properties:
      Runtime: python3.7
      Code:
        S3Bucket: !Sub 'quilt-lambda-${AWS::Region}'
        S3Key: pkgevents/73389f1f.zip
      Handler: index.handler
      Role: !GetAtt 'PkgEventsRole.Arn'
      Timeout: 30
      MemorySize: 128
      ReservedConcurrentExecutions: 5
    Type: AWS::Lambda::Function
  PkgEventsLogGroup:
    Properties:
      LogGroupName: !Sub '/aws/lambda/${PkgEvents}'
      RetentionInDays: 90
    Type: AWS::Logs::LogGroup
  PkgEventsDLQ:
    Type: AWS::SQS::Queue
  PkgEventsQueue:
    Properties:
      VisibilityTimeout: 240
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt 'PkgEventsDLQ.Arn'
        maxReceiveCount: 15
    Type: AWS::SQS::Queue
  PkgEventsEventSourceMapping:
    Properties:
      BatchSize: 200
      MaximumBatchingWindowInSeconds: 60
      Enabled: true
      EventSourceArn: !GetAtt 'PkgEventsQueue.Arn'
      FunctionName: !Ref 'PkgEvents'
    Type: AWS::Lambda::EventSourceMapping
  PkgSelectLambdaRole:
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref 'BucketReadPolicy'
    Type: AWS::IAM::Role
  PkgSelectLambda:
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt 'PkgSelectLambdaRole.Arn'
      Runtime: python3.7
      Timeout: 120
      MemorySize: 3008
      Code:
        S3Bucket: !Sub 'quilt-lambda-${AWS::Region}'
        S3Key: pkgselect/a1e4826a.zip
    Type: AWS::Lambda::Function
  PkgSelectLambdaLogGroup:
    Properties:
      LogGroupName: !Sub '/aws/lambda/${PkgSelectLambda}'
      RetentionInDays: 90
    Type: AWS::Logs::LogGroup
  AmazonECSTaskExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - !Ref 'BucketReadPolicy'
        - !Ref 'BucketWritePolicy'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - es:ESHttpDelete
                  - es:ESHttpGet
                  - es:ESHttpHead
                  - es:ESHttpPost
                  - es:ESHttpPut
                Resource: !Sub '${Search.Arn}/*'
              - Effect: Allow
                Action:
                  - aws-marketplace:RegisterUsage
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:GetBucketCORS
                  - s3:GetBucketLocation
                  - s3:GetBucketNotification
                  - s3:GetBucketVersioning
                  - s3:ListBucket
                  - s3:ListBucketVersions
                  - s3:PutBucketCORS
                  - s3:PutBucketNotification
                  - s3:PutBucketVersioning
                Resource: '*'
              - Effect: Allow
                Action:
                  - sqs:*
                Resource:
                  - !GetAtt 'IndexerQueue.Arn'
                  - !GetAtt 'PkgEventsQueue.Arn'
              - Effect: Allow
                Action:
                  - sns:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - glue:BatchGetPartition
                  - glue:BatchDeletePartition
                  - glue:BatchCreatePartition
                  - glue:GetPartitions
                  - glue:CreatePartition
                  - glue:DeletePartition
                Resource: '*'
              - Effect: Allow
                Action: cloudtrail:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - iam:GetPolicy
                  - iam:CreatePolicyVersion
                  - iam:ListPolicyVersions
                  - iam:DeletePolicyVersion
                  - iam:SetDefaultPolicyVersion
                Resource:
                  - !Ref 'BucketReadPolicy'
                  - !Ref 'BucketWritePolicy'
              - Effect: Allow
                Action:
                  - iam:CreatePolicy
                  - iam:DeletePolicy
                  - iam:CreatePolicyVersion
                  - iam:ListPolicyVersions
                  - iam:DeletePolicyVersion
                  - iam:SetDefaultPolicyVersion
                Resource: !Sub 'arn:aws:iam::${AWS::AccountId}:policy/quilt/${AWS::StackName}/${AWS::Region}/Quilt-*'
              - Effect: Allow
                Action:
                  - lambda:GetFunctionConfiguration
                  - lambda:UpdateFunctionConfiguration
                Resource: !GetAtt 'SearchHandler.Arn'
              - Effect: Allow
                Action: ssm:PutParameter
                Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${IndexingPerBucketConfigs}'
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt 'PkgSelectLambda.Arn'
    Type: AWS::IAM::Role
  T4DefaultBucketReadPolicy:
    Properties:
      ManagedPolicyName: !Sub 'ReadQuiltPolicy-${AWS::StackName}'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
            Resource:
              - !Sub 'arn:aws:s3:::${AnalyticsBucket}/AccessCounts/*'
          - Effect: Allow
            Action:
              - s3:ListBucket
              - s3:ListBucketVersions
            Resource:
              - !Sub 'arn:aws:s3:::${AnalyticsBucket}'
            Condition:
              StringLike:
                s3:prefix:
                  - AccessCounts/*
          - Action: s3:GetObject
            Effect: Allow
            Resource: !Sub '${ServiceBucket.Arn}/catalog/settings.json'
    Type: AWS::IAM::ManagedPolicy
  T4BucketReadRole:
    Properties:
      RoleName: !Sub 'ReadQuiltV2-${AWS::StackName}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              AWS:
                - !GetAtt 'AmazonECSTaskExecutionRole.Arn'
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref 'T4DefaultBucketReadPolicy'
        - !Ref 'BucketReadPolicy'
    Type: AWS::IAM::Role
  T4BucketWriteRole:
    Properties:
      RoleName: !Sub 'ReadWriteQuiltV2-${AWS::StackName}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              AWS:
                - !GetAtt 'AmazonECSTaskExecutionRole.Arn'
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref 'T4DefaultBucketReadPolicy'
        - !Ref 'BucketReadPolicy'
        - !Ref 'BucketWritePolicy'
      Policies:
        - PolicyName: allow-s3-stored-user-requests
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Action: s3:PutObject
              Effect: Allow
              Resource: !Sub '${ServiceBucket.Arn}/user-requests/create-package'
        - PolicyName: catalog-config
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Action: s3:PutObject
              Effect: Allow
              Resource: !Sub '${ServiceBucket.Arn}/catalog/settings.json'
    Type: AWS::IAM::Role
  ManagedUserRoleBasePolicy:
    Properties:
      Path: !Sub '/quilt/${AWS::StackName}/${AWS::Region}/'
      Description: Base policy applied for all managed roles.
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
            Resource:
              - !Sub 'arn:aws:s3:::${AnalyticsBucket}/AccessCounts/*'
          - Effect: Allow
            Action:
              - s3:ListBucket
              - s3:ListBucketVersions
            Resource:
              - !Sub 'arn:aws:s3:::${AnalyticsBucket}'
            Condition:
              StringLike:
                s3:prefix:
                  - AccessCounts/*
          - Action: s3:GetObject
            Effect: Allow
            Resource: !Sub '${ServiceBucket.Arn}/catalog/settings.json'
          - Action: s3:PutObject
            Effect: Allow
            Resource: !Sub '${ServiceBucket.Arn}/user-requests/create-package'
    Type: AWS::IAM::ManagedPolicy
  ManagedUserRole:
    Properties:
      Path: !Sub '/quilt/${AWS::StackName}/${AWS::Region}/'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              AWS:
                - !GetAtt 'AmazonECSTaskExecutionRole.Arn'
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref 'ManagedUserRoleBasePolicy'
        - !Ref 'BucketReadPolicy'
        - !Ref 'BucketWritePolicy'
    Type: AWS::IAM::Role
  RegistryTaskDefinition:
    Properties:
      Family: !Sub '${AWS::StackName}-registry'
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt 'AmazonECSTaskExecutionRole.Arn'
      TaskRoleArn: !GetAtt 'AmazonECSTaskExecutionRole.Arn'
      Cpu: '512'
      Memory: 2GB
      ContainerDefinitions:
        - Name: registry
          Image: 730278974607.dkr.ecr.us-east-1.amazonaws.com/quiltdata/registry:5bda0e6b5c246fbc34761b0240b5c4dc83695cdf
          Environment:
            - Name: ANALYTICS_CATALOG_ID
              Value: !Ref 'AWS::AccountId'
            - Name: QUILT_SERVER_CONFIG
              Value: prod_config.py
            - Name: SQLALCHEMY_DATABASE_URI
              Value: !Sub
                - postgresql://${User}:${Password}@${Host}:${Port}/quilt
                - User: !Ref 'DBUser'
                  Password: !Ref 'DBPassword'
                  Host: !GetAtt 'DB.Endpoint.Address'
                  Port: !GetAtt 'DB.Endpoint.Port'
            - Name: QUILT_BUCKET_READ_POLICY_ARN
              Value: !Ref 'BucketReadPolicy'
            - Name: QUILT_BUCKET_WRITE_POLICY_ARN
              Value: !Ref 'BucketWritePolicy'
            - Name: CATALOG_URL
              Value: !Sub 'https://${QuiltWebHost}'
            - Name: ES_ENDPOINT
              Value: !Sub
                - https://${ES_HOST}
                - ES_HOST: !GetAtt 'Search.DomainEndpoint'
            - Name: API_GATEWAY
              Value: !Sub 'https://${Api}.execute-api.${AWS::Region}.amazonaws.com/prod'
            - Name: AWS_DEFAULT_REGION
              Value: !Ref 'AWS::Region'
            - Name: QUILT_INDEXER_QUEUE_URL
              Value: !Ref 'IndexerQueue'
            - Name: QUILT_INDEXER_LAMBDA_ARN
              Value: !GetAtt 'SearchHandler.Arn'
            - Name: QUILT_PKG_EVENTS_QUEUE_URL
              Value: !Ref 'PkgEventsQueue'
            - Name: DEPLOYMENT_ID
              Value: !Ref 'QuiltWebHost'
            - Name: GIT_HASH
              Value: v5bda0e6b5c246fbc34761b0240b5c4dc83695cdf
            - Name: ALLOW_ANONYMOUS_ACCESS
              Value: ''
            - Name: MIXPANEL_PROJECT_TOKEN
              Value: e3385877c980efdce0a7eaec5a8a8277
            - Name: AWS_MP_PRODUCT_CODE
              Value: f5d6l3y7x2yy2fcm0uxr9gglh
            - Name: AWS_MP_PUBLIC_KEY_VERSION
              Value: '1'
            - Name: EMAIL_SERVER
              Value: https://email.quiltdata.com
            - Name: CUSTOMER_ID
              Value: ''
            - Name: MP_DISABLE_METERING
              Value: ''
            - Name: DEFAULT_USER_ROLE
              Value: ReadQuiltBucket
            - Name: ANALYTICS_DATABASE
              Value: !Join
                - _
                - !Split
                  - '-'
                  - !Ref 'AnalyticsBucket'
            - Name: QUILT_ANALYTICS_BUCKET
              Value: !Ref 'AnalyticsBucket'
            - Name: GOOGLE_CLIENT_ID
              Value: !Ref 'GoogleClientId'
            - Name: QUILT_LOG_LEVEL
              Value: INFO
            - Name: QUILT_SEARCH_ES_HOST
              Value: !GetAtt 'Search.DomainEndpoint'
            - Name: QUILT_SEARCH_INDEX_OVERRIDES
              Value: ''
            - Name: QUILT_SEARCH_MAX_DOCS_PER_SHARD
              Value: '10000'
            - Name: QUILT_MANAGED_USER_ROLE_ARN
              Value: !GetAtt 'ManagedUserRole.Arn'
            - Name: QUILT_USER_ROLE_BASE_POLICY_ARN
              Value: !Ref 'ManagedUserRoleBasePolicy'
            - Name: QUILT_IAM_PATH
              Value: !Sub '/quilt/${AWS::StackName}/${AWS::Region}/'
            - Name: QUILT_IAM_POLICY_NAME_PREFIX
              Value: Quilt-
            - Name: QUILT_INDEXING_CONTENT_BYTES
              Value: '{"default": 256000, "min": 0, "max": 1048576}'
            - Name: QUILT_INDEXING_CONTENT_EXTENSIONS
              Value: '[".csv", ".ipynb", ".json", ".md", ".parquet", ".rmd", ".tsv", ".txt"]'
            - Name: QUILT_INDEXING_BUCKET_CONFIGS_PARAMETER
              Value: !Ref 'IndexingPerBucketConfigs'
            - Name: QUILT_PKGSELECT_LAMBDA_ARN
              Value: !Ref 'PkgSelectLambda'
            - Name: ANALYTICS_TRAIL
              Value: !Ref 'Trail'
            - Name: DISABLE_SIGNUP
              Value: !If
                - SsoAuth
                - ''
                - '1'
            - Name: DISABLE_PASSWORD_SIGNUP
              Value: '1'
            - Name: SSO_PROVIDERS
              Value: !Join
                - ' '
                - - !If
                    - GoogleAuth
                    - google
                    - ''
                  - !If
                    - OktaAuth
                    - okta
                    - ''
                  - !If
                    - OneLoginAuth
                    - onelogin
                    - ''
                  - !If
                    - AzureAuth
                    - azure
                    - ''
            - Name: DISABLE_PASSWORD_AUTH
              Value: !If
                - SingleSignOn
                - '1'
                - ''
            - Name: GOOGLE_DOMAIN_WHITELIST
              Value: !Ref 'SingleSignOnDomains'
            - Name: OKTA_CLIENT_ID
              Value: !Ref 'OktaClientId'
            - Name: OKTA_BASE_URL
              Value: !Ref 'OktaBaseUrl'
            - Name: ONELOGIN_CLIENT_ID
              Value: !Ref 'OneLoginClientId'
            - Name: ONELOGIN_BASE_URL
              Value: !Ref 'OneLoginBaseUrl'
            - Name: AZURE_CLIENT_ID
              Value: !Ref 'AzureClientId'
            - Name: AZURE_BASE_URL
              Value: !Ref 'AzureBaseUrl'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'LogGroup'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: registry
        - Name: nginx
          Image: 730278974607.dkr.ecr.us-east-1.amazonaws.com/quiltdata/nginx:aef3328
          Environment:
            - Name: UWSGI_HOST
              Value: localhost
            - Name: UWSGI_PORT
              Value: '9000'
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'LogGroup'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: registry
    Type: AWS::ECS::TaskDefinition
  BulkScannerTaskDefinition:
    Properties:
      Family: !Sub '${AWS::StackName}-bulk-scanner'
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt 'AmazonECSTaskExecutionRole.Arn'
      TaskRoleArn: !GetAtt 'AmazonECSTaskExecutionRole.Arn'
      Cpu: '512'
      Memory: 2GB
      ContainerDefinitions:
        - Name: bucket_scanner
          Image: 730278974607.dkr.ecr.us-east-1.amazonaws.com/quiltdata/registry:5bda0e6b5c246fbc34761b0240b5c4dc83695cdf
          Environment:
            - Name: ES_HOST
              Value: !GetAtt 'Search.DomainEndpoint'
            - Name: QUILT_SERVER_CONFIG
              Value: prod_config.py
            - Name: CATALOG_URL
              Value: !Sub 'https://${QuiltWebHost}'
            - Name: AWS_DEFAULT_REGION
              Value: !Ref 'AWS::Region'
            - Name: SQLALCHEMY_DATABASE_URI
              Value: !Sub
                - postgresql://${User}:${Password}@${Host}:${Port}/quilt
                - User: !Ref 'DBUser'
                  Password: !Ref 'DBPassword'
                  Host: !GetAtt 'DB.Endpoint.Address'
                  Port: !GetAtt 'DB.Endpoint.Port'
            - Name: GIT_HASH
              Value: v5bda0e6b5c246fbc34761b0240b5c4dc83695cdf
            - Name: QUILT_LOG_LEVEL
              Value: INFO
          Command:
            - /usr/local/bin/flask
            - bucket_scanner
            - !GetAtt 'IndexerQueue.QueueName'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'LogGroup'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: bulk_loader
    Type: AWS::ECS::TaskDefinition
  RegistryMigrationTaskDefinition:
    Properties:
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt 'AmazonECSTaskExecutionRole.Arn'
      TaskRoleArn: !GetAtt 'AmazonECSTaskExecutionRole.Arn'
      Cpu: '512'
      Memory: 2GB
      ContainerDefinitions:
        - Name: registry_migration
          Image: 730278974607.dkr.ecr.us-east-1.amazonaws.com/quiltdata/registry:5bda0e6b5c246fbc34761b0240b5c4dc83695cdf
          Environment:
            - Name: QUILT_ADMIN_USERNAME
              Value: !Ref 'AdminUsername'
            - Name: QUILT_ADMIN_EMAIL
              Value: !Ref 'AdminEmail'
            - Name: QUILT_ADMIN_PASSWORD
              Value: !If
                - SsoAuth
                - ''
                - !Ref 'AdminPassword'
            - Name: QUILT_ADMIN_SSO_ONLY
              Value: !If
                - SsoAuth
                - '1'
                - ''
            - Name: QUILT_SERVER_CONFIG
              Value: prod_config.py
            - Name: QUILT_INDEXER_QUEUE_URL
              Value: !Ref 'IndexerQueue'
            - Name: QUILT_PKG_EVENTS_QUEUE_URL
              Value: !Ref 'PkgEventsQueue'
            - Name: SQLALCHEMY_DATABASE_URI
              Value: !Sub
                - postgresql://${User}:${Password}@${Host}:${Port}/quilt
                - User: !Ref 'DBUser'
                  Password: !Ref 'DBPassword'
                  Host: !GetAtt 'DB.Endpoint.Address'
                  Port: !GetAtt 'DB.Endpoint.Port'
            - Name: CATALOG_URL
              Value: !Sub 'https://${QuiltWebHost}'
            - Name: MIXPANEL_PROJECT_TOKEN
              Value: e3385877c980efdce0a7eaec5a8a8277
            - Name: ES_ENDPOINT
              Value: !Sub
                - https://${ES_HOST}
                - ES_HOST: !GetAtt 'Search.DomainEndpoint'
            - Name: QUILT_BUCKET_READ_POLICY_ARN
              Value: !Ref 'BucketReadPolicy'
            - Name: QUILT_BUCKET_WRITE_POLICY_ARN
              Value: !Ref 'BucketWritePolicy'
            - Name: GIT_HASH
              Value: v5bda0e6b5c246fbc34761b0240b5c4dc83695cdf
            - Name: ANALYTICS_DATABASE
              Value: !Join
                - _
                - !Split
                  - '-'
                  - !Ref 'AnalyticsBucket'
            - Name: QUILT_LOG_LEVEL
              Value: INFO
          Command:
            - sh
            - -c
            - !Sub 'flask db upgrade && ./scripts/update_bucket_policies.py && ./scripts/create_roles.py -n ReadQuiltBucket -a ${T4BucketReadRole.Arn} && ./scripts/create_roles.py -n ReadWriteQuiltBucket
              -a ${T4BucketWriteRole.Arn} && ./scripts/create_admin.py -e -r ReadWriteQuiltBucket && ./scripts/rebuild_named_packages_table.py && ./scripts/create_package_indexes.py --package-prefix .quilt/named_packages
              && ./scripts/fix_pkg_events_queue_subscriptions.py'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'LogGroup'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: registry
      Family: !Sub '${AWS::StackName}-registry-migration'
    Type: AWS::ECS::TaskDefinition
  S3ProxyTaskDefinition:
    Properties:
      Family: !Sub '${AWS::StackName}-s3-proxy'
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt 'AmazonECSTaskExecutionRole.Arn'
      TaskRoleArn: !GetAtt 'AmazonECSTaskExecutionRole.Arn'
      Cpu: '256'
      Memory: 1GB
      ContainerDefinitions:
        - Name: s3-proxy
          Image: 730278974607.dkr.ecr.us-east-1.amazonaws.com/quiltdata/s3-proxy:0a85720e
          Environment:
            - Name: REGISTRY_HOST
              Value: !Join
                - .
                - - !Join
                    - '-'
                    - - !Select
                        - 0
                        - !Split
                          - .
                          - !Ref 'QuiltWebHost'
                      - registry
                  - !Select
                    - 1
                    - !Split
                      - .
                      - !Ref 'QuiltWebHost'
                  - !Select
                    - 2
                    - !Split
                      - .
                      - !Ref 'QuiltWebHost'
            - Name: INTERNAL_REGISTRY_URL
              Value: !Sub
                - https://${ELB_HOST}
                - ELB_HOST: !GetAtt 'LoadBalancer.DNSName'
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'LogGroup'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: s3-proxy
    Type: AWS::ECS::TaskDefinition
  MigrationLambdaRole:
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecs:RunTask
                Resource: !Ref 'RegistryMigrationTaskDefinition'
                Condition:
                  ArnEquals:
                    ecs:cluster: !GetAtt 'Cluster.Arn'
        - PolicyName: passon
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !GetAtt 'AmazonECSTaskExecutionRole.Arn'
    Type: AWS::IAM::Role
  MigrationLambdaFunction:
    Properties:
      Handler: index.handler
      Role: !GetAtt 'MigrationLambdaRole.Arn'
      Code:
        ZipFile: |
          const response = require('cfn-response');
          const AWS = require('aws-sdk');
          const ecs = new AWS.ECS({apiVersion: '2014-11-13'});

          exports.handler = function(event, context) {
            if (event.RequestType === 'Delete') {
              response.send(event, context, response.SUCCESS, {});
            } else {
              const params = event.ResourceProperties;
              delete params.ServiceToken;
              ecs.runTask(params, function(err, data) {
                if (err) {
                  console.error('error: ', "Error while starting task: " + err);
                  response.send(event, context, response.FAILED, err);
                } else {
                  console.log('started: ' + JSON.stringify(data.tasks));
                  response.send(event, context, response.SUCCESS, {});
                }
              });
            }
          };
      Timeout: 30
      Runtime: nodejs12.x
    Type: AWS::Lambda::Function
  MigrationCallout:
    Properties:
      ServiceToken: !GetAtt 'MigrationLambdaFunction.Arn'
      taskDefinition: !Ref 'RegistryMigrationTaskDefinition'
      cluster: !Ref 'Cluster'
      launchType: FARGATE
      networkConfiguration:
        awsvpcConfiguration:
          assignPublicIp: ENABLED
          securityGroups:
            - !GetAtt 'VPC.DefaultSecurityGroup'
          subnets:
            - !Ref 'SubnetA'
            - !Ref 'SubnetB'
    Type: Custom::LambdaCallout
    DependsOn:
      - BucketReadPolicy
      - BucketWritePolicy
  RegistryListenerRule:
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref 'RegistryTargetGroup'
      Conditions:
        - Field: host-header
          Values:
            - !Join
              - .
              - - !Join
                  - '-'
                  - - !Select
                      - 0
                      - !Split
                        - .
                        - !Ref 'QuiltWebHost'
                    - registry
                - !Select
                  - 1
                  - !Split
                    - .
                    - !Ref 'QuiltWebHost'
                - !Select
                  - 2
                  - !Split
                    - .
                    - !Ref 'QuiltWebHost'
      ListenerArn: !Ref 'Listener'
      Priority: 30
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
  RegistryTargetGroup:
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /healthcheck
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 82
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref 'VPC'
      TargetType: ip
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: LoadBalancer
  RegistryService:
    Properties:
      ServiceName: !Sub '${AWS::StackName}-registry'
      Cluster: !Ref 'Cluster'
      LaunchType: FARGATE
      DesiredCount: 2
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      LoadBalancers:
        - ContainerName: nginx
          ContainerPort: 80
          TargetGroupArn: !Ref 'RegistryTargetGroup'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !GetAtt 'VPC.DefaultSecurityGroup'
          Subnets:
            - !Ref 'SubnetA'
            - !Ref 'SubnetB'
      TaskDefinition: !Ref 'RegistryTaskDefinition'
    Type: AWS::ECS::Service
    DependsOn: RegistryListenerRule
  S3ProxyListenerRule:
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref 'S3ProxyTargetGroup'
      Conditions:
        - Field: host-header
          Values:
            - !Join
              - .
              - - !Join
                  - '-'
                  - - !Select
                      - 0
                      - !Split
                        - .
                        - !Ref 'QuiltWebHost'
                    - s3-proxy
                - !Select
                  - 1
                  - !Split
                    - .
                    - !Ref 'QuiltWebHost'
                - !Select
                  - 2
                  - !Split
                    - .
                    - !Ref 'QuiltWebHost'
      ListenerArn: !Ref 'Listener'
      Priority: 40
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
  S3ProxyTargetGroup:
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 81
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref 'VPC'
      TargetType: ip
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: LoadBalancer
  S3ProxyService:
    Properties:
      ServiceName: !Sub '${AWS::StackName}-s3-proxy'
      Cluster: !Ref 'Cluster'
      LaunchType: FARGATE
      DesiredCount: 2
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      LoadBalancers:
        - ContainerName: s3-proxy
          ContainerPort: 80
          TargetGroupArn: !Ref 'S3ProxyTargetGroup'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !GetAtt 'VPC.DefaultSecurityGroup'
          Subnets:
            - !Ref 'SubnetA'
            - !Ref 'SubnetB'
      TaskDefinition: !Ref 'S3ProxyTaskDefinition'
    Type: AWS::ECS::Service
    DependsOn: S3ProxyListenerRule
  BulkScannerService:
    Properties:
      ServiceName: !Sub '${AWS::StackName}-bulk-scanner'
      Cluster: !Ref 'Cluster'
      LaunchType: FARGATE
      DesiredCount: 2
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !GetAtt 'VPC.DefaultSecurityGroup'
          Subnets:
            - !Ref 'SubnetA'
            - !Ref 'SubnetB'
      TaskDefinition: !Ref 'BulkScannerTaskDefinition'
    Type: AWS::ECS::Service
  NginxCatalogTaskDefinition:
    Properties:
      Family: !Sub '${AWS::StackName}-nginx_catalog'
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt 'AmazonECSTaskExecutionRole.Arn'
      TaskRoleArn: !GetAtt 'AmazonECSTaskExecutionRole.Arn'
      Cpu: '256'
      Memory: '0.5GB'
      ContainerDefinitions:
        - Name: nginx-catalog
          Image: 730278974607.dkr.ecr.us-east-1.amazonaws.com/quiltdata/catalog:2fa68a7d2
          Environment:
            - Name: REGISTRY_URL
              Value: !Sub
                - https://${REG_URL}
                - REG_URL: !Join
                    - .
                    - - !Join
                        - '-'
                        - - !Select
                            - 0
                            - !Split
                              - .
                              - !Ref 'QuiltWebHost'
                          - registry
                      - !Select
                        - 1
                        - !Split
                          - .
                          - !Ref 'QuiltWebHost'
                      - !Select
                        - 2
                        - !Split
                          - .
                          - !Ref 'QuiltWebHost'
            - Name: API_GATEWAY
              Value: !Sub 'https://${Api}.execute-api.${AWS::Region}.amazonaws.com/prod'
            - Name: BINARY_API_GATEWAY
              Value: !Sub 'https://${BinaryApi}.execute-api.${AWS::Region}.amazonaws.com/prod'
            - Name: S3_PROXY_URL
              Value: !Sub
                - https://${PROXY_URL}
                - PROXY_URL: !Join
                    - .
                    - - !Join
                        - '-'
                        - - !Select
                            - 0
                            - !Split
                              - .
                              - !Ref 'QuiltWebHost'
                          - s3-proxy
                      - !Select
                        - 1
                        - !Split
                          - .
                          - !Ref 'QuiltWebHost'
                      - !Select
                        - 2
                        - !Split
                          - .
                          - !Ref 'QuiltWebHost'
            - Name: GOOGLE_CLIENT_ID
              Value: !Ref 'GoogleClientId'
            - Name: OKTA_CLIENT_ID
              Value: !Ref 'OktaClientId'
            - Name: OKTA_BASE_URL
              Value: !Ref 'OktaBaseUrl'
            - Name: ONELOGIN_CLIENT_ID
              Value: !Ref 'OneLoginClientId'
            - Name: ONELOGIN_BASE_URL
              Value: !Ref 'OneLoginBaseUrl'
            - Name: AZURE_CLIENT_ID
              Value: !Ref 'AzureClientId'
            - Name: AZURE_BASE_URL
              Value: !Ref 'AzureBaseUrl'
            - Name: ALWAYS_REQUIRE_AUTH
              Value: 'true'
            - Name: INTERCOM_APP_ID
              Value: eprutqnr
            - Name: PASSWORD_AUTH
              Value: !If
                - SingleSignOn
                - DISABLED
                - SIGN_IN_ONLY
            - Name: SSO_AUTH
              Value: !If
                - SsoAuth
                - ENABLED
                - DISABLED
            - Name: SSO_PROVIDERS
              Value: !Join
                - ' '
                - - !If
                    - GoogleAuth
                    - google
                    - ''
                  - !If
                    - OktaAuth
                    - okta
                    - ''
                  - !If
                    - OneLoginAuth
                    - onelogin
                    - ''
                  - !If
                    - AzureAuth
                    - azure
                    - ''
            - Name: SENTRY_DSN
              Value: https://cfde44007c3844aab3d1ee3f0ba53a1a@sentry.io/1410550
            - Name: MIXPANEL_TOKEN
              Value: e3385877c980efdce0a7eaec5a8a8277
            - Name: ANALYTICS_BUCKET
              Value: !Ref 'AnalyticsBucket'
            - Name: SERVICE_BUCKET
              Value: !Ref 'ServiceBucket'
            - Name: CATALOG_MODE
              Value: PRODUCT
            - Name: NO_DOWNLOAD
              Value: 'false'
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'LogGroup'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: registry
    Type: AWS::ECS::TaskDefinition
  NginxCatalogTargetGroup:
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /healthcheck
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 83
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref 'VPC'
      TargetType: ip
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: LoadBalancer
  CatalogListenerRule:
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref 'NginxCatalogTargetGroup'
      Conditions:
        - Field: host-header
          Values:
            - !Ref 'QuiltWebHost'
      ListenerArn: !Ref 'Listener'
      Priority: 25
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
  NginxCatalogService:
    Properties:
      ServiceName: !Sub '${AWS::StackName}-nginx_catalog'
      Cluster: !Ref 'Cluster'
      LaunchType: FARGATE
      DesiredCount: 2
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      LoadBalancers:
        - ContainerName: nginx-catalog
          ContainerPort: 80
          TargetGroupArn: !Ref 'NginxCatalogTargetGroup'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !GetAtt 'VPC.DefaultSecurityGroup'
          Subnets:
            - !Ref 'SubnetA'
            - !Ref 'SubnetB'
      TaskDefinition: !Ref 'NginxCatalogTaskDefinition'
    Type: AWS::ECS::Service
    DependsOn: CatalogListenerRule
  ApiRole:
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Type: AWS::IAM::Role
  Api:
    Properties:
      Name: !Ref 'AWS::StackName'
      Policy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: execute-api:Invoke
            Resource:
              - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*/*/preview'
    Type: AWS::ApiGateway::RestApi
  PreviewHandler:
    Properties:
      Handler: t4_lambda_preview.lambda_handler
      Role: !GetAtt 'ApiRole.Arn'
      Runtime: python3.7
      Timeout: 29
      MemorySize: 3008
      Code:
        S3Bucket: !Sub 'quilt-lambda-${AWS::Region}'
        S3Key: preview/dba92895.zip
      Environment:
        Variables:
          WEB_ORIGIN: !Sub 'https://${QuiltWebHost}'
    Type: AWS::Lambda::Function
  PreviewResource:
    Properties:
      RestApiId: !Ref 'Api'
      ParentId: !GetAtt 'Api.RootResourceId'
      PathPart: preview
    Type: AWS::ApiGateway::Resource
  PreviewMethod:
    Properties:
      RestApiId: !Ref 'Api'
      ResourceId: !Ref 'PreviewResource'
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PreviewHandler.Arn}/invocations'
    Type: AWS::ApiGateway::Method
  PreviewPermission:
    Properties:
      FunctionName: !GetAtt 'PreviewHandler.Arn'
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*/*/*'
    Type: AWS::Lambda::Permission
  ApiDeployment1643765642:
    Properties:
      RestApiId: !Ref 'Api'
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - PreviewMethod
  ApiStage:
    Properties:
      StageName: prod
      RestApiId: !Ref 'Api'
      DeploymentId: !Ref 'ApiDeployment1643765642'
    Type: AWS::ApiGateway::Stage
  BinaryApi:
    Properties:
      Name: !Sub '${AWS::StackName}-binary'
      MinimumCompressionSize: 1024
      BinaryMediaTypes:
        - '*/*'
    Type: AWS::ApiGateway::RestApi
  ThumbnailLambda:
    Properties:
      Role: !GetAtt 'ApiRole.Arn'
      PackageType: Image
      Timeout: 29
      MemorySize: 2048
      Code:
        ImageUri: !Sub '730278974607.dkr.ecr.${AWS::Region}.amazonaws.com/quiltdata/lambdas/thumbnail:1f50a2bb0a29e80e5064987d3ee34cf540b7585a'
      Environment:
        Variables:
          WEB_ORIGIN: !Sub 'https://${QuiltWebHost}'
    Type: AWS::Lambda::Function
  ThumbnailResource:
    Properties:
      RestApiId: !Ref 'BinaryApi'
      ParentId: !GetAtt 'BinaryApi.RootResourceId'
      PathPart: thumbnail
    Type: AWS::ApiGateway::Resource
  ThumbnailMethod:
    Properties:
      RestApiId: !Ref 'BinaryApi'
      ResourceId: !Ref 'ThumbnailResource'
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ThumbnailLambda.Arn}/invocations'
    Type: AWS::ApiGateway::Method
  ThumbnailPermission:
    Properties:
      FunctionName: !GetAtt 'ThumbnailLambda.Arn'
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BinaryApi}/*/*/*'
    Type: AWS::Lambda::Permission
  TranscodeFfmpegLayer:
    Properties:
      LayerName: ffmpeg
      Content:
        S3Bucket: !Sub 'quilt-lambda-${AWS::Region}'
        S3Key: transcode/ffmpeg-4.4.1-amd64-static.zip
    Type: AWS::Lambda::LayerVersion
  TranscodeHandlerLogGroup:
    Properties:
      LogGroupName: !Sub '/aws/lambda/${TranscodeHandler}'
      RetentionInDays: 90
    Type: AWS::Logs::LogGroup
  TranscodeHandler:
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt 'ApiRole.Arn'
      Runtime: python3.7
      Timeout: 29
      MemorySize: 2048
      Code:
        S3Bucket: !Sub 'quilt-lambda-${AWS::Region}'
        S3Key: transcode/7d6e41177.zip
      Environment:
        Variables:
          WEB_ORIGIN: !Sub 'https://${QuiltWebHost}'
      Layers:
        - !Ref 'TranscodeFfmpegLayer'
    Type: AWS::Lambda::Function
  TranscodeResource:
    Properties:
      RestApiId: !Ref 'BinaryApi'
      ParentId: !GetAtt 'BinaryApi.RootResourceId'
      PathPart: transcode
    Type: AWS::ApiGateway::Resource
  TranscodeMethod:
    Properties:
      RestApiId: !Ref 'BinaryApi'
      ResourceId: !Ref 'TranscodeResource'
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TranscodeHandler.Arn}/invocations'
    Type: AWS::ApiGateway::Method
  TranscodePermission:
    Properties:
      FunctionName: !GetAtt 'TranscodeHandler.Arn'
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BinaryApi}/*/*/*'
    Type: AWS::Lambda::Permission
  BinaryApiDeployment1643765642:
    Properties:
      RestApiId: !Ref 'BinaryApi'
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ThumbnailMethod
      - TranscodeMethod
  BinaryApiStage:
    Properties:
      StageName: prod
      RestApiId: !Ref 'BinaryApi'
      DeploymentId: !Ref 'BinaryApiDeployment1643765642'
    Type: AWS::ApiGateway::Stage
  S3HashLambdaRole:
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Type: AWS::IAM::Role
  S3HashLambda:
    Properties:
      Runtime: python3.7
      Code:
        S3Bucket: !Sub 'quilt-lambda-${AWS::Region}'
        S3Key: s3hash/8c4e0ece.zip
      Handler: index.lambda_handler
      Role: !GetAtt 'S3HashLambdaRole.Arn'
      Timeout: 900
      MemorySize: 1024
      ReservedConcurrentExecutions: 100
    Type: AWS::Lambda::Function
  S3HashLambdaLogGroup:
    Properties:
      LogGroupName: !Sub '/aws/lambda/${S3HashLambda}'
      RetentionInDays: 90
    Type: AWS::Logs::LogGroup
  PkgPushRole:
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: allow-s3-stored-user-requests
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Action: s3:GetObjectVersion
              Effect: Allow
              Resource: !Sub '${ServiceBucket.Arn}/user-requests/create-package'
        - PolicyName: invoke-s3-hash-lambda
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Effect: Allow
              Action: lambda:InvokeFunction
              Resource: !GetAtt 'S3HashLambda.Arn'
    Type: AWS::IAM::Role
  PkgPromote:
    Properties:
      Runtime: python3.7
      Code:
        S3Bucket: !Sub 'quilt-lambda-${AWS::Region}'
        S3Key: pkgpush/8c4e0ece.zip
      Handler: index.promote_package
      Role: !GetAtt 'PkgPushRole.Arn'
      Timeout: 900
      MemorySize: 512
      ReservedConcurrentExecutions: 5
      Environment:
        Variables:
          WEB_ORIGIN: !Sub 'https://${QuiltWebHost}'
          QUILT_MINIMIZE_STDOUT: 'true'
          PROMOTE_PKG_MAX_MANIFEST_SIZE: '104857600'
          PROMOTE_PKG_MAX_PKG_SIZE: '107374182400'
          PROMOTE_PKG_MAX_FILES: '5000'
          PKG_FROM_FOLDER_MAX_PKG_SIZE: '107374182400'
          PKG_FROM_FOLDER_MAX_FILES: '5000'
          S3_HASH_LAMBDA_MAX_FILE_SIZE_BYTES: '10737418240'
          QUILT_TRANSFER_MAX_CONCURRENCY: '500'
          SERVICE_BUCKET: !Ref 'ServiceBucket'
          S3_HASH_LAMBDA: !Ref 'S3HashLambda'
          S3_HASH_LAMBDA_CONCURRENCY: 10
    Type: AWS::Lambda::Function
  PkgPromoteLogGroup:
    Properties:
      LogGroupName: !Sub '/aws/lambda/${PkgPromote}'
      RetentionInDays: 90
    Type: AWS::Logs::LogGroup
  PkgPromotePermission:
    Properties:
      FunctionName: !GetAtt 'PkgPromote.Arn'
      Action: lambda:InvokeFunction
      Principal: elasticloadbalancing.amazonaws.com
    Type: AWS::Lambda::Permission
  PkgPromoteTargetGroup:
    Properties:
      TargetType: lambda
      Targets:
        - Id: !GetAtt 'PkgPromote.Arn'
          AvailabilityZone: all
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - PkgPromotePermission
  PkgPromoteListenerRule:
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref 'PkgPromoteTargetGroup'
      Conditions:
        - Field: host-header
          Values:
            - !Join
              - .
              - - !Join
                  - '-'
                  - - !Select
                      - 0
                      - !Split
                        - .
                        - !Ref 'QuiltWebHost'
                    - registry
                - !Select
                  - 1
                  - !Split
                    - .
                    - !Ref 'QuiltWebHost'
                - !Select
                  - 2
                  - !Split
                    - .
                    - !Ref 'QuiltWebHost'
        - Field: path-pattern
          Values:
            - /api/packages/promote
      ListenerArn: !Ref 'Listener'
      Priority: 29
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
  PkgFromFolder:
    Properties:
      Runtime: python3.7
      Code:
        S3Bucket: !Sub 'quilt-lambda-${AWS::Region}'
        S3Key: pkgpush/8c4e0ece.zip
      Handler: index.package_from_folder
      Role: !GetAtt 'PkgPushRole.Arn'
      Timeout: 900
      MemorySize: 1024
      ReservedConcurrentExecutions: 5
      Environment:
        Variables:
          WEB_ORIGIN: !Sub 'https://${QuiltWebHost}'
          QUILT_MINIMIZE_STDOUT: 'true'
          PROMOTE_PKG_MAX_MANIFEST_SIZE: '104857600'
          PROMOTE_PKG_MAX_PKG_SIZE: '107374182400'
          PROMOTE_PKG_MAX_FILES: '5000'
          PKG_FROM_FOLDER_MAX_PKG_SIZE: '107374182400'
          PKG_FROM_FOLDER_MAX_FILES: '5000'
          S3_HASH_LAMBDA_MAX_FILE_SIZE_BYTES: '10737418240'
          QUILT_TRANSFER_MAX_CONCURRENCY: '500'
          SERVICE_BUCKET: !Ref 'ServiceBucket'
          S3_HASH_LAMBDA: !Ref 'S3HashLambda'
          S3_HASH_LAMBDA_CONCURRENCY: 10
    Type: AWS::Lambda::Function
  PkgFromFolderLogGroup:
    Properties:
      LogGroupName: !Sub '/aws/lambda/${PkgFromFolder}'
      RetentionInDays: 90
    Type: AWS::Logs::LogGroup
  PkgFromFolderPermission:
    Properties:
      FunctionName: !GetAtt 'PkgFromFolder.Arn'
      Action: lambda:InvokeFunction
      Principal: elasticloadbalancing.amazonaws.com
    Type: AWS::Lambda::Permission
  PkgFromFolderTargetGroup:
    Properties:
      TargetType: lambda
      Targets:
        - Id: !GetAtt 'PkgFromFolder.Arn'
          AvailabilityZone: all
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - PkgFromFolderPermission
  PkgFromFolderListenerRule:
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref 'PkgFromFolderTargetGroup'
      Conditions:
        - Field: host-header
          Values:
            - !Join
              - .
              - - !Join
                  - '-'
                  - - !Select
                      - 0
                      - !Split
                        - .
                        - !Ref 'QuiltWebHost'
                    - registry
                - !Select
                  - 1
                  - !Split
                    - .
                    - !Ref 'QuiltWebHost'
                - !Select
                  - 2
                  - !Split
                    - .
                    - !Ref 'QuiltWebHost'
        - Field: path-pattern
          Values:
            - /api/packages/from-folder
      ListenerArn: !Ref 'Listener'
      Priority: 28
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
  PkgCreate:
    Properties:
      Runtime: python3.7
      Code:
        S3Bucket: !Sub 'quilt-lambda-${AWS::Region}'
        S3Key: pkgpush/8c4e0ece.zip
      Handler: index.create_package
      Role: !GetAtt 'PkgPushRole.Arn'
      Timeout: 900
      MemorySize: 1024
      ReservedConcurrentExecutions: 5
      Environment:
        Variables:
          WEB_ORIGIN: !Sub 'https://${QuiltWebHost}'
          QUILT_MINIMIZE_STDOUT: 'true'
          PROMOTE_PKG_MAX_MANIFEST_SIZE: '104857600'
          PROMOTE_PKG_MAX_PKG_SIZE: '107374182400'
          PROMOTE_PKG_MAX_FILES: '5000'
          PKG_FROM_FOLDER_MAX_PKG_SIZE: '107374182400'
          PKG_FROM_FOLDER_MAX_FILES: '5000'
          S3_HASH_LAMBDA_MAX_FILE_SIZE_BYTES: '10737418240'
          QUILT_TRANSFER_MAX_CONCURRENCY: '500'
          SERVICE_BUCKET: !Ref 'ServiceBucket'
          S3_HASH_LAMBDA: !Ref 'S3HashLambda'
          S3_HASH_LAMBDA_CONCURRENCY: 10
    Type: AWS::Lambda::Function
  PkgCreateLogGroup:
    Properties:
      LogGroupName: !Sub '/aws/lambda/${PkgCreate}'
      RetentionInDays: 90
    Type: AWS::Logs::LogGroup
  PkgCreatePermission:
    Properties:
      FunctionName: !GetAtt 'PkgCreate.Arn'
      Action: lambda:InvokeFunction
      Principal: elasticloadbalancing.amazonaws.com
    Type: AWS::Lambda::Permission
  PkgCreateTargetGroup:
    Properties:
      TargetType: lambda
      Targets:
        - Id: !GetAtt 'PkgCreate.Arn'
          AvailabilityZone: all
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - PkgCreatePermission
  PkgCreateListenerRule:
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref 'PkgCreateTargetGroup'
      Conditions:
        - Field: host-header
          Values:
            - !Join
              - .
              - - !Join
                  - '-'
                  - - !Select
                      - 0
                      - !Split
                        - .
                        - !Ref 'QuiltWebHost'
                    - registry
                - !Select
                  - 1
                  - !Split
                    - .
                    - !Ref 'QuiltWebHost'
                - !Select
                  - 2
                  - !Split
                    - .
                    - !Ref 'QuiltWebHost'
        - Field: path-pattern
          Values:
            - /api/packages
      ListenerArn: !Ref 'Listener'
      Priority: 27
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
  ServiceBucket:
    Properties:
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: user-requests
            Status: Enabled
            Prefix: user-requests/
            ExpirationInDays: 1
            NoncurrentVersionExpirationInDays: 1
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
    Type: AWS::S3::Bucket
